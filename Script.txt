# Function to display help
display_help() {
    echo "Usage: internsctl [OPTIONS]"
    echo "Custom Linux command for intern operations."
    echo
    echo "Options:"
    echo "  --help                       Display this help message"
    echo "  --version                    Display command version"
    echo "  cpu getinfo                  Get CPU information (similar to lscpu)"
    echo "  memory getinfo               Get memory information (similar to free)"
    echo "  user create <username>       Create a new user"
    echo "  user list                    List all regular users"
    echo "  user list --sudo-only        List users with sudo permissions"
    echo "  file getinfo <file-name>     Get information about a file"
    echo "  file getinfo [OPTIONS] <file-name>  Get specific information about a file"
    echo "    Options:"
    echo "      --size, -s               Print file size"
    echo "      --permissions, -p        Print file permissions"
    echo "      --owner, -o              Print file owner"
    echo "      --last-modified, -m      Print last modified time"
}

# Function to display version
display_version() {
    echo "internsctl v0.1.0"
}

# Function to get CPU information
get_cpu_info() {
    lscpu
}

# Function to get memory info
get_memory_info() {
    free
}

# Function to create a new user
create_user() {
    if [ -z "$2" ]; then
        echo "Error: Please provide a username for user creation."
        display_help
        exit 1
    fi

    sudo useradd -m -s /bin/bash "$2"
    sudo passwd "$2"
    echo "User '$2' created successfully."
}

# Function to list all regular users
list_users() {
    cut -d: -f1 /etc/passwd
}

# Function to list users with sudo permissions
list_sudo_users() {
    getent group sudo | cut -d: -f4 | tr ',' '\n'
}

# Function to get file information
get_file_info() {
    local file_name=$1

    if [ ! -e "$file_name" ]; then
        echo "Error: File '$file_name' does not exist."
        exit 1
    fi

    # Get file information
    local file_info=$(stat -c "File: %n%nAccess: %A%nSize(B): %s%nOwner: %U%nModify: %y" "$file_name")

    echo "$USER@$HOSTNAME:~\$ internsctl file getinfo $file_name"
    echo "$file_info"
}

# Function to display file information based on options
display_file_info_options() {
    local file_name=$1
    local size_option=false
    local permissions_option=false
    local owner_option=false
    local last_modified_option=false

    # Parse options
    shift
    while [[ "$#" -gt 1 ]]; do
        case $2 in
            --size | -s)
                size_option=true
                ;;
            --permissions | -p)
                permissions_option=true
                ;;
            --owner | -o)
                owner_option=true
                ;;
            --last-modified | -m)
                last_modified_option=true
                ;;
            *)
                echo "Error: Unknown option '$2'"
                exit 1
                ;;
        esac
        shift
    done

    # Get file information
    local file_info=$(stat -c "File: %n%nAccess: %A%nSize(B): %s%nOwner: %U%nModify: %y" "$file_name")

    # Print specific information based on options
    if $size_option; then
        echo "Size(B): $(stat -c '%s' "$file_name")"
    fi

    if $permissions_option; then
        echo "Access: $(stat -c '%A' "$file_name")"
    fi

    if $owner_option; then
        echo "Owner: $(stat -c '%U' "$file_name")"
    fi

    if $last_modified_option; then
        echo "Modify: $(stat -c '%y' "$file_name")"
    fi
}

# Parse command-line options
case $1 in
    --help)
        display_help
        ;;
    --version)
        display_version
        ;;
    cpu)
        case $2 in
            getinfo)
                get_cpu_info
                ;;
            *)
                echo "Error: Unknown subcommand '$2' for 'cpu'"
                display_help
                exit 1
                ;;
        esac
        ;;
    memory)
        case $2 in
            getinfo)
                get_memory_info
                ;;
            *)
                echo "Error: Unknown subcommand '$2' for 'memory'"
                display_help
                exit 1
                ;;
        esac
        ;;
    user)
        case $2 in
            create)
		shift 1
                create_user "$@"
                ;;
            list)
                if [ "$3" == "--sudo-only" ]; then
                    list_sudo_users
                else
                    list_users
                fi
                ;;
            *)
                echo "Error: Unknown subcommand '$2' for 'user'"
                display_help
                exit 1
                ;;
        esac
        ;;
    file)
        case $2 in
            getinfo)
                shift 2
                if [ "$#" -eq 1 ]; then
                    get_file_info "$@"
                elif [ "$#" -gt 1 ]; then
                    display_file_info_options "$@"
                else
                    echo "Error: Please provide a file name."
                    exit 1
                fi
                ;;
            *)
                echo "Error: Unknown subcommand '$2' for 'file'"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Error: Unknown option '$1'"
        display_help
        exit 1
        ;;
esac
